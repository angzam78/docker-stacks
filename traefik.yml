version: '3.9'

services:

  traefik:
    image: traefik:latest 
    ports:
       - 80:80
       - 443:443
    volumes:
       - letsencrypt:/letsencrypt
       - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
       - frontend_network
       - dockersocket
    configs:
      - source: traefik.yaml
        target: /etc/traefik/traefik.yaml
      - source: dynamic.yaml
        target: /etc/traefik/dynamic.yaml
    deploy:
      restart_policy:
        condition: on-failure
      placement:
        constraints:
          - node.role == manager
          - node.platform.os == linux
      labels:
        - traefik.enable=true
        - traefik.http.routers.dashboard.rule=Host(`home.workload.stream`) && (PathPrefix(`/api`) || PathPrefix(`/dashboard`))
        - traefik.http.routers.dashboard.entrypoints=websecure
        - traefik.http.routers.dashboard.tls.certresolver=letsencrypt
        - traefik.http.routers.dashboard.service=api@internal
        - traefik.http.routers.dashboard.middlewares=auth
        - traefik.http.middlewares.auth.basicauth.users=admin:$$apr1$$A9AipdCL$$Xih/fNBFrmm.P/Paeu.op/
        - traefik.http.services.dashboardservice.loadbalancer.server.port=80

  socket-proxy:
    image: tecnativa/docker-socket-proxy:latest
    environment:
      NETWORKS: 1
      SERVICES: 1
      TASKS: 1
      CONTAINERS: 1
      SWARM: 1
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      dockersocket:
    deploy:
      restart_policy:
        condition: on-failure
      placement:
        constraints: 
          - node.role == manager
          - node.platform.os == linux

  whoami:
    image: "traefik/whoami"
    networks:
       - frontend_network
    deploy:
      labels:
        - traefik.enable=true
        - traefik.http.routers.whoami.rule=Host(`home.workload.stream`)
        - traefik.http.routers.whoami.entrypoints=websecure
#        - traefik.http.routers.whoami.tls=true
        - traefik.http.routers.whoami.tls.certresolver=letsencrypt
#        - traefik.http.routers.whoami.tls.domains[0].main=home.workload.stream
#        - traefik.http.routers.whoami.tls.domains[0].sans=*.home.workload.stream
        - traefik.http.services.whoamiservice.loadBalancer.server.port=80

configs:
  dynamic.yaml:
    file: traefik/dynamic.yaml
  traefik.yaml:
    file: traefik/traefik.yaml.tmpl
    template_driver: golang

networks:
  dockersocket:
    internal: true
  frontend_network:
    external: true

volumes:
  letsencrypt:
    driver: seaweedfs:latest
    driver_opts:
      'host': '172.17.0.1:8888'
      'filerpath': '/buckets/docker/letsencrypt'

