version: '3.9'

services:

  mariadb:
    hostname: "mariadb{{.Task.Slot}}"
    image: mariadb:10.9.3
    entrypoint: >
      bin/sh -c "
        export SERVICE_NAME=mariadb
        export CLUSTER_NODES=3
        export MYSQL_ROOT_PASSWORD=piggyback123
			  export IP_ADDRESS=`getent hosts | grep $$HOSTNAME | awk '{print $$1}'`
			
			  echo Cluster peers:
			  echo `getent hosts tasks.$$SERVICE_NAME`
			
  	    CLUSTER_MEMBERS=`getent hosts tasks.$$SERVICE_NAME | grep -v $$IP_ADDRESS | awk '{print $$1}'`
			  
				# Check we can see enough peers to form a Primary Component
			  if [ `getent hosts tasks.$$SERVICE_NAME | wc -l` -lt $$((($${CLUSTER_NODES}+1)/2)) ]; then
			    echo Cannot see enough peers to form a cluster - restarting.
			    exit 1
			  fi
							   
			  # If we are the first node then assume responsability
			  if [ `getent hosts tasks.$$SERVICE_NAME | sort -V | head -n 1 | awk '{print $$1}'` = $$IP_ADDRESS ]; then
			    echo Looks like we are the first member. Testing for an established cluster between other nodes...
							 				    
			    # Check to see if the other nodes have an established cluster
			    for MEMBER in $$CLUSTER_MEMBERS
			    do
			      echo Testing $$MEMBER...
			      if echo SHOW STATUS LIKE 'wsrep_local_state_comment'; | mysql -u root -p$$MYSQL_ROOT_PASSWORD -h $MEMBER | grep "Synced"; then
			        
							# Connect to existing cluster
			        echo Success!
			        
			        break
			      else
			        echo Failed!
			      fi
			    done
		     
			    # Can't connect to any other hosts; we need to bootstrap
			    if [ -z $$CLUSTER_ADDRESS ]; then
			      echo ** No cluster found; bootstrapping on this node **
			      
			    fi
			
			    # Join existing cluster
			    if [ -z $$CLUSTER_ADDRESS ]; then
 	     
			    fi
			  fi
			
			  
      "
    volumes:
      - data:/var/lib/mysql
    networks:
      - network
    secrets:
      - adminpass
    configs:
      - source: galera.cnf
        target: /etc/mysql/mariadb.conf.d/60-galera.cnf
    environment:
      - MYSQL_ROOT_PASSWORD_FILE=/run/secrets/adminpass
    deploy:
      mode: replicated
      replicas: 3
      placement:
        max_replicas_per_node: 1
        constraints:
          - node.role == manager
          - node.platform.os == linux

  phpmyadmin:
    image: phpmyadmin
    ports:
      - "8979:80"
    networks:
      - network
    environment:
      - PMA_HOST=mariadb

configs:
  galera.cnf:
    file: galera.cnf.tmpl
    template_driver: golang

secrets:
  adminpass:
    external: true

volumes:
  data:

networks:
  network:

